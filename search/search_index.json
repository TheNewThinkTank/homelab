{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"homelab","text":"<p>K8S clusters running on PN51 and Raspberry Pi 5</p>"},{"location":"gitops/","title":"GitOps","text":""},{"location":"gitops/#check-flux-sync","title":"Check Flux Sync","text":"<p>Trigger a manual Flux reconciliation to ensure all the changes are applied:</p> <pre><code>flux reconcile kustomization flux-system -n flux-system\n\n# Verify that the HelmRepository and HelmReleases are correctly deployed\nflux get helmrepositories -n flux-system\nflux get helmreleases -n monitoring\n</code></pre>"},{"location":"observability/","title":"Observability","text":""},{"location":"observability/#verify-prometheus-and-grafana-installation","title":"Verify Prometheus and Grafana Installation","text":"<p>Check pods in monitoring namespace to confirm that Prometheus and Grafana are running:</p> <pre><code>k get po -n monitoring\n\n# Check services to get the NodePort for accessing Prometheus and Grafana\nk get svc -n monitoring\n</code></pre> <p>Use the NodePort to access Prometheus or Grafana in browser, e.g.:</p> <p>Prometheus: <code>http://&lt;z-pi-ip&gt;:&lt;prometheus-nodeport&gt;</code> Grafana: <code>http://&lt;z-pi-ip&gt;:&lt;grafana-nodeport&gt;</code></p>"},{"location":"PN51/","title":"Index","text":""},{"location":"PN51/#asus-pn51-home-server-configuration","title":"Asus PN51 Home Server Configuration","text":"<p>Asus PN51 * AMD Ryzen\u2122 7 5700U Processor 1.8GHz (12M Cache, up to 4.3GHz) * Integrated - Radeon\u2122 Vega Graphics * Gigabit LAN, Realtek\u00ae 8111EP * 32GB Crucial Ballistix LDDR4 Memory * 1TB Samsung 980 NVME PCIE4.0 </p>"},{"location":"PN51/#networking","title":"Networking:","text":"<ul> <li>TODO: setup Firewall: (e.g. Cloudflare tunnels)</li> <li>TODO: setup Auth proxy: (e.g. Authelia)</li> </ul>"},{"location":"PN51/#usb-content","title":"USB content","text":"<ul> <li>ventoy (boot loader)</li> <li>Linux images</li> </ul>"},{"location":"PN51/architecture-diagrams/","title":"Architecture Diagrams","text":""},{"location":"PN51/architecture-diagrams/#automating-asus-pn51-setup-c4-model-diagrams","title":"Automating Asus PN51 Setup - C4 Model Diagrams","text":"<p>This document provides two diagrams using the C4 model to visualize the architecture for automating the setup of an Asus PN51 using GitHub Actions and ArgoCD.</p>"},{"location":"PN51/architecture-diagrams/#context-diagram","title":"Context Diagram","text":"<p>The Context Diagram provides a high-level overview of the external systems interacting with the automation setup.</p> <pre><code>C4Context\n    title Context Diagram for Automating Asus PN51 Setup\n\n    Person(user, \"Developer\", \"Manages the homelab repository and triggers workflows.\")\n    System(github, \"GitHub\", \"Hosts the `homelab` repository and runs GitHub Actions workflows.\")\n    System(pn51, \"Asus PN51\", \"The target machine to be configured and managed.\")\n    System(argocd, \"ArgoCD\", \"Monitors the Git repository and applies configurations automatically.\")\n\n    Rel(user, github, \"Pushes code to\")\n    Rel(github, pn51, \"Triggers Terraform/Ansible via SSH\")\n    Rel(argocd, pn51, \"Applies configurations from Git\")\n    Rel(user, argocd, \"Configures ArgoCD applications\")</code></pre> <pre><code>C4Container\n    title Container Diagram for Automating Asus PN51 Setup\n\n    Person(user, \"Developer\", \"Manages the homelab repository and triggers workflows.\")\n    System_Boundary(github_system, \"GitHub\") {\n        Container(github_repo, \"Repository\", \"Git\", \"Stores Terraform and Ansible configurations.\")\n        Container(github_actions, \"GitHub Actions\", \"CI/CD\", \"Runs workflows to apply Terraform and Ansible configurations.\")\n    }\n    System_Boundary(pn51_system, \"Asus PN51\") {\n        Container(ssh_server, \"SSH Server\", \"OpenSSH\", \"Allows remote access to the PN51.\")\n        Container(terraform_target, \"Terraform Target\", \"Infrastructure\", \"Managed by Terraform configurations.\")\n        Container(ansible_target, \"Ansible Target\", \"Configuration\", \"Managed by Ansible playbooks.\")\n    }\n    System_Boundary(argocd_system, \"ArgoCD\") {\n        Container(argocd_app, \"ArgoCD Application\", \"GitOps\", \"Monitors the Git repository and applies changes.\")\n    }\n\n    Rel(user, github_repo, \"Pushes code to\")\n    Rel(github_repo, github_actions, \"Triggers workflows\")\n    Rel(github_actions, ssh_server, \"Runs Terraform/Ansible via SSH\")\n    Rel(ssh_server, terraform_target, \"Applies infrastructure changes\")\n    Rel(ssh_server, ansible_target, \"Applies configuration changes\")\n    Rel(argocd_app, ssh_server, \"Applies configurations from Git\")\n    Rel(user, argocd_app, \"Configures ArgoCD applications\")</code></pre>"},{"location":"PN51/hardening/basic-hardening/","title":"Basic Linux Hardening Script for Ubuntu","text":"<p>My basic hardening script for my Ubuntu system running on the Asus PN51. This script <code>ubuntu_hardening.sh</code> covers essential security measures without being overly aggressive, making it suitable for my home K8S setup.</p>"},{"location":"PN51/hardening/basic-hardening/#important-notes-before-running-this-script","title":"Important Notes Before Running This Script:","text":"<ol> <li> <p>Review the script carefully before running it to ensure it aligns with your specific needs.</p> </li> <li> <p>SSH Warning: The script disables password authentication for SSH and requires key-based authentication. Make sure you have SSH keys set up before running this script, or you might lock yourself out.</p> </li> <li> <p>Firewall Configuration: The script includes common K8S ports, but you may need to adjust these based on your specific RKE setup.</p> </li> <li> <p>Backup: Always create a system backup before applying security hardening measures.</p> </li> <li> <p>Testing: Consider testing this script in a non-production environment first.</p> </li> </ol>"},{"location":"PN51/hardening/basic-hardening/#how-to-use-the-script","title":"How to Use the Script:","text":"<ol> <li>Save the script to a file named <code>ubuntu_hardening.sh</code></li> <li>Make it executable: <code>chmod +x ubuntu_hardening.sh</code></li> <li>Run it with sudo: <code>sudo ./ubuntu_hardening.sh</code></li> <li>Reboot your system after completion</li> </ol>"},{"location":"PN51/hardening/basic-hardening/#additional-k8s-specific-security","title":"Additional K8S-Specific Security","text":"<p>For my K8S environment, I am considering these additional measures (not included in the script):</p> <ol> <li>Use <code>kube-bench</code> to check my cluster against CIS K8S Benchmarks</li> <li>Implement network policies to restrict pod-to-pod communication</li> <li>Use RBAC properly to limit access to the K8S API</li> <li>Implementing a service mesh like Istio for additional security controls</li> <li>Use secrets management solutions rather than storing secrets in plain text</li> </ol>"},{"location":"PN51/hardening/hardening-overview/","title":"Linux Hardening for Asus PN51 Mini PC","text":"<p>Based on my setup (Asus PN51 running Ubuntu via Ventoy for hobby projects including self-hosted K8S), implementing some security hardening measures is beneficial, since I will be hosting web applications that may be accessible from the internet.</p> <p>My activities listed below increase my attack surface, making security hardening important. - Self-hosting web applications - Running a Kubernetes cluster (RKE) - Using ArgoCD for deployments - Maintaining public GitHub repositories</p>"},{"location":"PN51/hardening/hardening-overview/#recommended-approach","title":"Recommended Approach","text":"<p>Rather than using a single \"do-it-all\" hardening script (which might be too aggressive or not tailored to my specific needs), I choose a more measured approach:</p>"},{"location":"PN51/hardening/hardening-overview/#1-starting-with-a-baseline-hardening-tool","title":"1. Starting with a Baseline Hardening Tool","text":"<p>I currently consider using one of these established tools:</p> <ul> <li>Lynis - An open-source security auditing tool that can both assess my system and provide hardening recommendations</li> <li>OpenSCAP - Security compliance and hardening framework</li> <li>Ubuntu's built-in security features - AppArmor, UFW (Uncomplicated Firewall), etc.</li> </ul>"},{"location":"PN51/hardening/hardening-overview/#2-key-areas-to-focus-on","title":"2. Key Areas to Focus On","text":"<p>For my specific setup (home K8S cluster with web apps), I prioritize:</p> <ul> <li>Network security: Configure UFW to limit exposed ports</li> <li>SSH hardening: Key-based authentication, disable root login</li> <li>Container security: Implement pod security policies in K8S</li> <li>Regular updates: Keeping my system and applications updated</li> <li>Secure CI/CD practices: For my ArgoCD workflows</li> <li>Least privilege principle: For all services and applications</li> </ul>"},{"location":"PN51/hardening/hardening-overview/#3-k8s-specific-security","title":"3. K8S-Specific Security","text":"<p>Since I am running RKE, I also plan to: - Implement network policies - Use RBAC properly - Consider tools like Falco for runtime security monitoring</p>"},{"location":"Z-Pi/","title":"Project 1","text":"<p>Single-node Kubernetes cluster to test GitOps workflows, for learning and experimentation.</p>"},{"location":"Z-Pi/#why-a-single-node-cluster-works","title":"Why a Single-Node Cluster Works","text":"<p>Resource Availability: 8GB of RAM is enough to run Kubernetes components (control plane and worker node) and lightweight workloads.</p> <p>Learning Focus: For testing GitOps workflows, the key is deploying and managing applications with tools like ArgoCD or FluxCD, which doesn't require multiple nodes.</p> <p>Expandability: You can add more Raspberry Pis later for a multi-node setup.</p>"},{"location":"Z-Pi/#steps-to-set-up-a-single-node-kubernetes-cluster","title":"Steps to Set Up a Single-Node Kubernetes Cluster","text":"<ol> <li>Install Kubernetes</li> </ol> <p>Use a lightweight distribution like k3s for better performance on a single node. Easy to set up and resource-efficient.</p> <ol> <li> <p>Install GitOps Tool</p> </li> <li> <p>Deploy ArgoCD or FluxCD to manage GitOps workflows. Both tools are lightweight and well-suited for testing on a single node.</p> </li> <li> <p>Example: Install ArgoCD using its Helm chart or YAML manifest.</p> </li> <li> <p>Configure Your GitOps Workflow</p> </li> <li> <p>Set up a GitHub repo to hold your Kubernetes manifests or Helm charts.</p> </li> <li> <p>Configure ArgoCD/FluxCD to sync with the repo.</p> </li> <li> <p>Test Deployments</p> </li> <li> <p>Deploy lightweight apps, such as:</p> </li> <li> <ul> <li>Nginx or Apache server</li> </ul> </li> <li> <ul> <li>A simple web app (e.g., Flask or React)</li> </ul> </li> <li> <ul> <li>Monitoring tools (e.g., Prometheus and Grafana)</li> </ul> </li> <li> <p>Monitor Resources</p> </li> <li> <p>Install a monitoring tool like k9s or Lens to track the resource usage of your single-node cluster.</p> </li> </ol>"},{"location":"Z-Pi/#what-to-keep-in-mind","title":"What to Keep in Mind","text":"<ul> <li>Resource Constraints: With only 8GB RAM, avoid deploying resource-heavy apps (e.g., databases like PostgreSQL) alongside the control plane.</li> <li>Scaling Later: If you add more Raspberry Pis, you can transition to a multi-node setup by joining them to the existing cluster.</li> <li>Storage: Use an external SSD for better performance if you plan to deploy applications that require persistent storage.</li> </ul>"},{"location":"Z-Pi/#step-by-step-guidance-on-setting-up-k3s-and-fluxcd","title":"Step-by-step guidance on setting up k3s and FluxCD","text":"<p>Setting up K3s on the Raspberry Pi 5 (z-pi) using GitOps to ensure a repeatable, automated, and secure setup process. Below is a step-by-step guide for this installation, ensuring sensitive data is not exposed in this public GitHub repository.</p>"},{"location":"Z-Pi/#1-prerequisites","title":"1. Prerequisites","text":"<ol> <li>Hardware:</li> <li>Raspberry Pi 5 with Raspbian or Ubuntu installed.</li> <li> <p>Internet access.</p> </li> <li> <p>Software:</p> </li> <li><code>git</code>, <code>kubectl</code>, and <code>helm</code> installed on your workstation.</li> <li> <p>Access to your public GitHub repo, <code>homelab</code>.</p> </li> <li> <p>Secure Files:</p> </li> <li>Use a private <code>.secrets/</code> directory (ignored by <code>.gitignore</code>) for sensitive data.</li> <li>Store secrets in a vault like HashiCorp Vault or use sealed-secrets for GitOps.</li> </ol>"},{"location":"Z-Pi/#2-prepare-the-raspberry-pi","title":"2. Prepare the Raspberry Pi","text":"<ol> <li> <p>Install Necessary Tools:    <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\ncurl -sfL https://get.k3s.io | sh -\n</code></pre></p> </li> <li> <p>Verify Installation:    <pre><code>sudo k3s kubectl get nodes\n</code></pre></p> </li> <li> <p>Set Up GitOps Directory:    Create a directory for <code>GitOps</code> configuration:    <pre><code>mkdir -p ~/gitops &amp;&amp; cd ~/gitops\ngit clone https://github.com/&lt;your-username&gt;/homelab.git\n</code></pre></p> </li> </ol>"},{"location":"Z-Pi/#3-configure-github-repo","title":"3. Configure GitHub Repo","text":"<ol> <li> <p>Set up <code>.gitignore</code>:    Ensure the <code>.gitignore</code> file in your <code>homelab</code> repo excludes sensitive data:    <pre><code>.secrets/\nkubeconfig.yaml\nprivate-keys/\n</code></pre></p> </li> <li> <p>Install Flux for GitOps:    Use Flux to sync your Raspberry Pi with your GitHub repository:    <pre><code>curl -s https://fluxcd.io/install.sh | sudo bash\nflux check --pre\n</code></pre></p> </li> <li> <p>Bootstrap Flux:</p> </li> </ol> <pre><code>flux bootstrap github \\\n  --owner=TheNewThinkTank \\\n  --repository=homelab \\\n  --branch=main \\\n  --path=clusters/z-pi \\\n  --personal\n</code></pre> <p>This will configure Flux to monitor the <code>clusters/z-pi</code> directory in your repo.</p>"},{"location":"Z-Pi/#4-add-applications","title":"4. Add Applications","text":"<ol> <li> <p>Helm Releases:    In the <code>clusters/z-pi/</code> directory, define Helm releases for applications like <code>nginx</code>:    <pre><code>apiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: nginx\n  namespace: default\nspec:\n  chart:\n    spec:\n      chart: nginx\n      version: 1.2.3\n      sourceRef:\n        kind: HelmRepository\n        name: bitnami\n        namespace: flux-system\n</code></pre></p> </li> <li> <p>Kubernetes Manifests:    Add manifests for essential services:</p> </li> <li>Ingress Controller</li> <li>Service Monitor</li> <li>Storage Class (for <code>local-path</code>).</li> </ol>"},{"location":"Z-Pi/#5-secure-secrets","title":"5. Secure Secrets","text":"<ol> <li> <p>Use Sealed Secrets:    Install the Sealed Secrets controller on the cluster:    <pre><code>kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.20.0/controller.yaml\n</code></pre></p> </li> <li> <p>Encrypt Secrets:    Encrypt secrets before committing them to your GitHub repo:    <pre><code>kubeseal --scope namespace-wide \\\n  --controller-name=sealed-secrets \\\n  --controller-namespace=flux-system \\\n  -o yaml &lt; your-secret.yaml &gt; sealed-secret.yaml\n</code></pre></p> </li> <li> <p>Use <code>.gitignore</code>:    Add raw secret files to <code>.gitignore</code> and only commit the sealed versions.</p> </li> </ol>"},{"location":"Z-Pi/#6-update-github-repo","title":"6. Update GitHub Repo","text":"<p>Push the changes to your repository: <pre><code>git add .\ngit commit -m \"Initial GitOps setup for z-pi\"\ngit push origin main\n</code></pre></p>"},{"location":"Z-Pi/#7-monitor-and-manage","title":"7. Monitor and Manage","text":"<ol> <li> <p>Flux Reconciliation:    Verify that Flux is pulling changes:    <pre><code>flux get all --namespace flux-system\n</code></pre></p> </li> <li> <p>Check Cluster Health:    Use <code>kubectl</code> to monitor the state of the cluster:    <pre><code>kubectl get pods --all-namespaces\n</code></pre></p> </li> </ol>"},{"location":"Z-Pi/#best-practices-for-security","title":"Best Practices for Security","text":"<ol> <li> <p>Use Firewalls:    Configure <code>ufw</code> or equivalent to block unauthorized access.    <pre><code>sudo ufw enable\nsudo ufw allow ssh\nsudo ufw allow 6443\n</code></pre></p> </li> <li> <p>SSH Key Management:    Use SSH keys for access instead of passwords.</p> </li> <li> <p>Monitor Logs:    Enable monitoring tools like Prometheus and Grafana.</p> </li> <li> <p>Limit Resource Exposure:    Avoid exposing the K3s API server directly to the internet.</p> </li> </ol>"},{"location":"Z-Pi/install-raspberry-os-macos/","title":"Raspberry Pi OS Installation","text":"<p>Install Raspberry Pi OS for Raspberry Pi 5 on an SD card directly from MacBook</p>"},{"location":"Z-Pi/install-raspberry-os-macos/#step-1-download-the-raspberry-pi-os","title":"Step 1: Download the Raspberry Pi OS","text":"<ol> <li>Visit the Raspberry Pi website and download the Raspberry Pi Imager for macOS.</li> <li>If you want a specific version of Raspberry Pi OS, you can also download an image from the OS images section. Save it to your computer.</li> </ol>"},{"location":"Z-Pi/install-raspberry-os-macos/#step-2-install-raspberry-pi-imager-on-macos","title":"Step 2: Install Raspberry Pi Imager on macOS","text":"<ol> <li>Open the downloaded Raspberry Pi Imager <code>.dmg</code> file.</li> <li>Drag the Raspberry Pi Imager icon into your Applications folder.</li> </ol>"},{"location":"Z-Pi/install-raspberry-os-macos/#step-3-write-the-os-to-the-sd-card","title":"Step 3: Write the OS to the SD Card","text":"<ol> <li>Insert the SD card into your MacBook using an SD card reader if needed.</li> <li>Open the Raspberry Pi Imager from your Applications folder.</li> <li>Select Choose OS and pick the version of Raspberry Pi OS you want. You can choose from standard Raspberry Pi OS versions or select \u201cUse custom\u201d if you downloaded a specific image.</li> <li>Choose your SD card under Choose Storage.</li> <li>Click Write and confirm. The Imager will download the OS (if not already downloaded) and write it to the SD card.</li> </ol>"},{"location":"Z-Pi/install-raspberry-os-macos/#step-4-eject-the-sd-card","title":"Step 4: Eject the SD Card","text":"<p>Once the writing process completes, safely eject the SD card from your MacBook.</p> <p>You\u2019re now ready to insert the SD card into your Raspberry Pi 5 and power it up! It should boot directly from the SD card with the installed Raspberry Pi OS.</p>"},{"location":"Z-Pi/parts_list/","title":"List of components used","text":"<ul> <li>Raspberry Pi 5, 8GB RAM</li> <li>official Raspberry Pi 5 case, black</li> <li>27W USB-c power supply</li> <li>official Raspberry Pi 5 keyboard, black</li> <li>official Raspberry Pi 5 mouse, black</li> <li>A2 128GB SD card, with Raspberry Pi OS pre-installed</li> </ul>"},{"location":"Z-Pi/references/","title":"References","text":"<p>raspberrypi stackexchange</p> <p>raspberrypi connect - devices</p> <p>raspberrypi id</p> <p>my device: <code>z-pi</code></p> <p>my id: <code>gus</code></p> <p>Flux concepts</p>"}]}